# coding: utf-8

"""
    QuestionsAPI

     QuestionsAPI helps you do operations with the scraped data. ðŸš€  ## Questions  You will be able to:  * **Put questions** (Create & Update & batch). * **Read questions**. * **Search questions**.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QuestionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'exam_number': 'int',
        'question_type': 'str',
        'answer_text': 'str',
        'is_correct': 'bool',
        'last_modified': 'str'
    }

    attribute_map = {
        'id': 'id',
        'exam_number': 'exam_number',
        'question_type': 'question_type',
        'answer_text': 'answer_text',
        'is_correct': 'is_correct',
        'last_modified': 'last_modified'
    }

    def __init__(self, id=None, exam_number=None, question_type=None, answer_text=None, is_correct=None, last_modified=None):  # noqa: E501
        """QuestionModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._exam_number = None
        self._question_type = None
        self._answer_text = None
        self._is_correct = None
        self._last_modified = None
        self.discriminator = None
        self.id = id
        self.exam_number = exam_number
        self.question_type = question_type
        self.answer_text = answer_text
        self.is_correct = is_correct
        self.last_modified = last_modified

    @property
    def id(self):
        """Gets the id of this QuestionModel.  # noqa: E501


        :return: The id of this QuestionModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionModel.


        :param id: The id of this QuestionModel.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def exam_number(self):
        """Gets the exam_number of this QuestionModel.  # noqa: E501


        :return: The exam_number of this QuestionModel.  # noqa: E501
        :rtype: int
        """
        return self._exam_number

    @exam_number.setter
    def exam_number(self, exam_number):
        """Sets the exam_number of this QuestionModel.


        :param exam_number: The exam_number of this QuestionModel.  # noqa: E501
        :type: int
        """
        if exam_number is None:
            raise ValueError("Invalid value for `exam_number`, must not be `None`")  # noqa: E501

        self._exam_number = exam_number

    @property
    def question_type(self):
        """Gets the question_type of this QuestionModel.  # noqa: E501


        :return: The question_type of this QuestionModel.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this QuestionModel.


        :param question_type: The question_type of this QuestionModel.  # noqa: E501
        :type: str
        """
        if question_type is None:
            raise ValueError("Invalid value for `question_type`, must not be `None`")  # noqa: E501

        self._question_type = question_type

    @property
    def answer_text(self):
        """Gets the answer_text of this QuestionModel.  # noqa: E501


        :return: The answer_text of this QuestionModel.  # noqa: E501
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this QuestionModel.


        :param answer_text: The answer_text of this QuestionModel.  # noqa: E501
        :type: str
        """
        if answer_text is None:
            raise ValueError("Invalid value for `answer_text`, must not be `None`")  # noqa: E501

        self._answer_text = answer_text

    @property
    def is_correct(self):
        """Gets the is_correct of this QuestionModel.  # noqa: E501


        :return: The is_correct of this QuestionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_correct

    @is_correct.setter
    def is_correct(self, is_correct):
        """Sets the is_correct of this QuestionModel.


        :param is_correct: The is_correct of this QuestionModel.  # noqa: E501
        :type: bool
        """
        if is_correct is None:
            raise ValueError("Invalid value for `is_correct`, must not be `None`")  # noqa: E501

        self._is_correct = is_correct

    @property
    def last_modified(self):
        """Gets the last_modified of this QuestionModel.  # noqa: E501


        :return: The last_modified of this QuestionModel.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this QuestionModel.


        :param last_modified: The last_modified of this QuestionModel.  # noqa: E501
        :type: str
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
